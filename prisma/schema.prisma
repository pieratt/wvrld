// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum MetadataStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  title       String?
  description String?
  image1      String?
  image2      String?
  color1      String
  color2      String
  type        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  posts       Post[]
  prompts     Prompt[]

  @@index([username])
}

model Prompt {
  id        Int      @id @default(autoincrement())
  rawText   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  post      Post?
}

model Post {
  id        Int       @id @default(autoincrement())
  ownerId   Int
  promptId  Int?      @unique
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  owner     User      @relation(fields: [ownerId], references: [id])
  prompt    Prompt?   @relation(fields: [promptId], references: [id])
  urls      PostURL[]

  @@index([ownerId])
  @@index([createdAt])
}

model URL {
  id             Int            @id @default(autoincrement())
  url            String         @unique
  domain         String?
  title          String?
  description    String?
  image1         String?
  saves          Int            @default(0)
  clicks         Int            @default(0)
  metadataStatus MetadataStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  posts          PostURL[]

  @@index([domain])
  @@index([createdAt])
}

model PostURL {
  id      Int  @id @default(autoincrement())
  postId  Int
  urlId   Int
  order   Int?
  comment String?

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  url  URL  @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@unique([postId, urlId])
  @@index([postId])
  @@index([urlId])
}
